package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_archive",
     "ocaml_ns_archive",
     "ocaml_ns_library",
     "ocaml_module",
     "ppx_executable",
     "ppx_module",
     "cc_selection_proxy",
)

load("@obazl//build:rules_ocaml.bzl",
     "ppxlib_executable", "ppx_expect_test")

DEPS_1 = [
    "@opam_bytes//lib/bytes",
    "//lib/runtime:jsoo_runtime"
]

#############################
####  Aggregate Targets  ####

#################
ocaml_ns_archive(  ##
# ocaml_ns_library(  ##
    name       = "js_of_ocaml",
    ns         = "js_of_ocaml",
    manifest = [
        ":CSS",
        ":Dom",
        ":Dom_events",
        ":Dom_html",
        ":Dom_svg",
        ":EventSource",
        ":File",
        ":Firebug",
        ":Form",
        ":Geolocation",
        ":Import",
        ":IntersectionObserver",
        ":Intl",
        ":Js",
        ":Js_of_ocaml",
        ":Json",
        ":Jstable",
        ":Lib_version",
        ":MutationObserver",
        ":PerformanceObserver",
        ":Regexp",
        ":ResizeObserver",
        ":Sys_js",
        ":Typed_array",
        ":Url",
        ":WebGL",
        ":WebSockets",
        ":Worker",
        ":XmlHttpRequest"
    ],
    cc_deps    = ["__libjs_of_ocaml__"],
)

######################## Modules & Signatures ########################
## this-is-main #f
ocaml_module(
    name          = "CSS",
    struct        = "cSS.ml",
    sig           = "cSS.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Regexp",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Dom",
    struct        = "dom.ml",
    sig           = "dom.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Dom_events",
    struct        = "dom_events.ml",
    sig           = "dom_events.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom_html",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Dom_html",
    struct        = "dom_html.ml",
    sig           = "dom_html.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":File",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Dom_svg",
    struct        = "dom_svg.ml",
    sig           = "dom_svg.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Dom_html",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "EventSource",
    struct        = "eventSource.ml",
    sig           = "eventSource.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "File",
    struct        = "file.ml",
    sig           = "file.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Js",
        ":Typed_array"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Firebug",
    struct        = "firebug.ml",
    sig           = "firebug.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Form",
    struct        = "form.ml",
    sig           = "form.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom_html",
        ":File",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Geolocation",
    struct        = "geolocation.ml",
    sig           = "geolocation.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "IntersectionObserver",
    struct        = "intersectionObserver.ml",
    sig           = "intersectionObserver.mli",
    deps          = DEPS_1 + [
        ":Dom",
        ":Dom_html",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Intl",
    struct        = "intl.ml",
    sig           = "intl.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Js",
    struct        = "js.ml",
    sig           = "js.mli",
    deps          = DEPS_1 + [
        ":Import"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Json",
    struct        = "json.ml",
    sig           = "json.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Jstable",
    struct        = "jstable.ml",
    sig           = "jstable.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "MutationObserver",
    struct        = "mutationObserver.ml",
    sig           = "mutationObserver.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "PerformanceObserver",
    struct        = "performanceObserver.ml",
    sig           = "performanceObserver.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Regexp",
    struct        = "regexp.ml",
    sig           = "regexp.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "ResizeObserver",
    struct        = "resizeObserver.ml",
    sig           = "resizeObserver.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Dom_html",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Sys_js",
    struct        = "sys_js.ml",
    sig           = "sys_js.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js",
        ":Lib_version"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Typed_array",
    struct        = "typed_array.ml",
    sig           = "typed_array.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Url",
    struct        = "url.ml",
    sig           = "url.mli",
    deps          = DEPS_1 + [
        ":Dom_html",
        ":Import",
        ":Js",
        ":Regexp"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "WebGL",
    struct        = "webGL.ml",
    sig           = "webGL.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom_html",
        ":Js",
        ":Typed_array"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "WebSockets",
    struct        = "webSockets.ml",
    sig           = "webSockets.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":Dom_html",
        ":File",
        ":Js",
        ":Typed_array"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "Worker",
    struct        = "worker.ml",
    sig           = "worker.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom_html",
        ":Js"
    ],
    ppx           = ":ppx_1.exe", #X2
)

## this-is-main #f
ocaml_module(
    name          = "XmlHttpRequest",
    struct        = "xmlHttpRequest.ml",
    sig           = "xmlHttpRequest.mli",
    deps          = DEPS_1 + [
        ":Import",
        ":Dom",
        ":File",
        ":Form",
        ":Js",
        ":Typed_array"
    ],
    ppx           = ":ppx_1.exe", #X2
)

ocaml_module(
    name          = "Import",
    struct        = "import.ml",
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
)

ocaml_module(
    name          = "Js_of_ocaml",
    struct        = "js_of_ocaml.ml",
    deps          = DEPS_1 + [
        ":CSS",
        ":Dom",
        ":Dom_events",
        ":Dom_html",
        ":Dom_svg",
        ":EventSource",
        ":File",
        ":Firebug",
        ":Form",
        ":Geolocation",
        ":IntersectionObserver",
        ":Intl",
        ":Js",
        ":Json",
        ":Jstable",
        ":MutationObserver",
        ":PerformanceObserver",
        ":Regexp",
        ":ResizeObserver",
        ":Sys_js",
        ":Typed_array",
        ":Url",
        ":WebGL",
        ":WebSockets",
        ":Worker",
        ":XmlHttpRequest"
    ],
    ppx           = ":ppx_1.exe", #X1
)

ocaml_module(
    name          = "Lib_version",
    struct        = "lib_version.ml",
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
)

###############
ppx_executable(
    name    = "ppx_1.exe",
    main    = ":Ppx_driver",
    deps = [
        "//ppx/ppx_js/lib_internal:ppx_js_internal"
    ],
)

# ppx_transform(
#     ppx = ":ppxlib.exe"
#     ...
# )

# ppxlib_transformer(
ppxlib_executable(
    name    = "ppxlib.exe",
    deps = [
        "//ppx/ppx_js/lib_internal:ppx_js_internal"
    ],
)

#############
ppx_module(
    name       = "Ppx_driver",
    struct     = ":ppx_driver.ml",
    visibility = ["//visibility:public"],
    deps       = ["@opam_ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "__ppx_driver__",
    outs = ["ppx_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ])
)

############################# Rules ##################################

########
genrule(
    outs  = [
        "js_of_ocaml_stubs.c"
    ],
    name  = "__js_of_ocaml_stubs.c__",
    srcs  = [
        ":glob_STAR.ml",
        "//lib/runtime:glob_STAR.ml"
    ],
    cmd   = " ".join([
        "$(execpath //lib/gen_stubs:gen_stubs.exe)",
        "`realpath $(locations :glob_STAR.ml)`",
        "--except",
        "`realpath $(locations //lib/runtime:glob_STAR.ml)`",
        "> $@"
    ]),
    exec_tools = [
        "//lib/gen_stubs:gen_stubs.exe"
    ]
)

######
copy_file(
    name = "__lib_version.ml",
    src  = "//:version.ml.in",
    out  = "lib_version.ml"
)
##########
filegroup(
    name = "glob_STAR.ml",
    srcs = glob(["*.ml"]),
    visibility = ["//visibility:public"]
)

## cc: ((:name . js_of_ocaml) (:srcs js_of_ocaml_stubs))
################ ################
cc_selection_proxy(
    name = "__libjs_of_ocaml__",
    selection = select({
        "@ocaml//platforms:vm?": ["dlljs_of_ocaml.stubs.so"],
        "@ocaml//platforms:sys?": ["js_of_ocaml.stubs"],
        "//conditions:default": ["js_of_ocaml.stubs"]    })
)

cc_binary(
    name = "dlljs_of_ocaml.stubs.so",
    linkshared = True,
    srcs = ["js_of_ocaml_stubs.c"],
)

cc_library(
    name = "js_of_ocaml.stubs",
    linkstatic = True,
    srcs = ["js_of_ocaml_stubs.c"],
)
