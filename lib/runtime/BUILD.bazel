package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_ns_archive",
     "ocaml_ns_library",
     "ocaml_module",
     "cc_selection_proxy",
)

#############################
####  Aggregate Targets  ####

##############
ocaml_ns_archive(
    name     = "jsoo_runtime",
    manifest   = [
        ":Jsoo_runtime",
        ":Foo",
    ],
    cc_deps    = ["__libjsoo_runtime__"],
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Jsoo_runtime",
    struct        = "jsoo_runtime.ml",
)

ocaml_module(
    name          = "Foo",
    struct        = "foo.ml",
)

############################# Rules ##################################

########
genrule(
    outs  = [
        "js_of_ocaml_runtime_stubs.c"
    ],
    name  = "__js_of_ocaml_runtime_stubs.c__",
    srcs  = [
        "//lib/runtime:glob_STAR.ml"
    ],
    cmd   = " ".join([
        "$(execpath //lib/gen_stubs:gen_stubs.exe)",
        "$(locations :glob_STAR.ml)",
        "> $@"
    ]),
    exec_tools = [
        "//lib/gen_stubs:gen_stubs.exe"
    ]
)

##########
filegroup(
    name = "glob_STAR.ml",
    srcs = glob(["*.ml"]),
    visibility = ["//lib/js_of_ocaml:__pkg__"]
)

## cc: ((:name . jsoo_runtime) (:srcs js_of_ocaml_runtime_stubs))
################ ################
cc_selection_proxy(
    name = "__libjsoo_runtime__",
    selection = select({
        "@ocaml//platforms:vm?": ["dlljsoo_runtime.stubs.so"],
        "@ocaml//platforms:sys?": ["jsoo_runtime.stubs"],
        "//conditions:default": ["jsoo_runtime.stubs"]    })
)

cc_binary(
    name = "dlljsoo_runtime.stubs.so",
    linkshared = True,
    srcs = ["js_of_ocaml_runtime_stubs.c"],
)

cc_library(
    name = "jsoo_runtime.stubs",
    linkstatic = True,
    srcs = ["js_of_ocaml_runtime_stubs.c"],
)
