package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_archive",
     "ocaml_ns_archive",
     "ocaml_module",
     "ppx_executable",
     "ppx_module",
     "cc_selection_proxy",
)

DEPS_1 = [
    "//lib/js_of_ocaml:js_of_ocaml",
    "//lib/lwt:js_of_ocaml_lwt",
    "@opam_lwt//lib/lwt",
    "@opam_graphics//lib/graphics"
]

#############################
####  Aggregate Targets  ####

#################
ocaml_ns_archive(  ##
    name       = "graphics_js",
    ns         = "graphics_js",
    manifest = [
        ":Graphics_js",
        ":Import"
    ],
    cc_deps    = ["__libgraphics_js__"],
)

######################## Modules & Signatures ########################
## this-is-main #f
ocaml_module(
    name          = "Graphics_js",
    struct        = "graphics_js.ml",
    sig           = "graphics_js.mli",
    deps          = DEPS_1 + [
        ":Import"
    ],
    ppx           = ":ppx_1.exe", #X2
)

ocaml_module(
    name          = "Import",
    struct        = "import.ml",
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
)


###############
ppx_executable(
    name    = "ppx_1.exe",
    main    = ":Ppx_driver",
    deps = [
        "//ppx/ppx_js/lib:ppx_js_rewriter"
    ],
)

#############
ppx_module(
    name       = "Ppx_driver",
    struct     = ":ppx_driver.ml",
    visibility = ["//visibility:public"],
    deps       = ["@opam_ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "__ppx_driver__",
    outs = ["ppx_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ])
)

############################# Rules ##################################

########
genrule(
    outs  = [
        "graphics_js_stubs.c"
    ],
    name  = "__graphics_js_stubs.c__",
    srcs  = [
        "//lib/lwt/graphics:glob_STAR.ml"
    ],
    cmd   = " ".join([
        "$(execpath //libgen_stubs:gen_stubs.exe)",
        "$(locations :glob_STAR.ml)",
        "> $@"
    ]),
    exec_tools = [
        "//libgen_stubs:gen_stubs.exe"
    ]
)

##########
filegroup(
    name = "glob_STAR.ml",
    srcs = glob(["*.ml"]),
    visibility = ["//visibility:public"]
)

## cc: ((:name . graphics_js) (:srcs graphics_js_stubs))
################ ################
cc_selection_proxy(
    name = "__libgraphics_js__",
    selection = select({
        "@ocaml//platforms:vm?": ["dllgraphics_js.stubs.so"],
        "@ocaml//platforms:sys?": ["graphics_js.stubs"],
        "//conditions:default": ["graphics_js.stubs"]    })
)

cc_binary(
    name = "dllgraphics_js.stubs.so",
    linkshared = True,
    srcs = ["graphics_js_stubs.c"],
)

cc_library(
    name = "graphics_js.stubs",
    linkstatic = True,
    srcs = ["graphics_js_stubs.c"],
)
