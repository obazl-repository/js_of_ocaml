package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_ns_archive",
     "ocaml_module",
     "ppx_executable",
)

DEPS_1 = [
    "@ocaml//unix",
    "//lib/js_of_ocaml:js_of_ocaml",
    "//lib/deriving_json:js_of_ocaml_deriving"
]

#############################
####  Aggregate Targets  ####

#################
ocaml_ns_archive(
    name       = "deriving_expect_tests",
    ns         = "deriving_expect_tests",
    manifest = [
        ":Json_convert"
    ],
)

######################## Modules & Signatures ########################

ocaml_module(
    name          = "Json_convert",
    struct        = "json_convert.ml",
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe",
)



###############
ppx_executable(
    name    = "ppx_1.exe",
    main    = ":Ppx_driver",
    deps = [
        "@ppx_expect//lib/ppx_expect",
        "//ppx/ppx_deriving_json/lib:ppx_deriving_json"
    ],
    ## @ppx_inline_test//lib/ppx_inline_test
)

#############
ocaml_module(
    name       = "Ppx_driver",
    struct     = ":ppx_driver.ml",
    visibility = ["//visibility:public"],
    deps       = ["@ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "__ppx_driver__",
    outs = ["ppx_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ])
)

