package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_archive",
     "ocaml_ns_archive",
     "ocaml_module",
     "ppx_executable",
     "ppx_module",
)

DEPS_1 = [
    "//compiler/lib:js_of_ocaml_compiler",
    "@ocaml//unix",
    "@ocaml//str",
    "//compiler/tests-compiler/util:jsoo_compiler_expect_tests_helper"
]

OPTS_1 = [
        "-open",
        "Jsoo_compiler_expect_tests_helper"
]

#############################
####  Aggregate Targets  ####

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_array_access",
    ns         = "jsooexp_array_access",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_build_path_prefix_map",
    ns         = "jsooexp_build_path_prefix_map",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_call_gen",
    ns         = "jsooexp_call_gen",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_cond",
    ns         = "jsooexp_cond",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_eliminate_exception_handler",
    ns         = "jsooexp_eliminate_exception_handler",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_empty_cma",
    ns         = "jsooexp_empty_cma",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_end_to_end",
    ns         = "jsooexp_end_to_end",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_error",
    ns         = "jsooexp_error",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_exceptions",
    ns         = "jsooexp_exceptions",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_exports",
    ns         = "jsooexp_exports",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_getenv",
    ns         = "jsooexp_getenv",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_gh1007",
    ns         = "jsooexp_gh1007",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_gh1051",
    ns         = "jsooexp_gh1051",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_gl507",
    ns         = "jsooexp_gl507",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_inlining",
    ns         = "jsooexp_inlining",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_js_parser_printer",
    ns         = "jsooexp_js_parser_printer",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_lazy",
    ns         = "jsooexp_lazy",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_macro",
    ns         = "jsooexp_macro",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_match_with_exn",
    ns         = "jsooexp_match_with_exn",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_mutable_closure",
    ns         = "jsooexp_mutable_closure",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_obj",
    ns         = "jsooexp_obj",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_obj_dup",
    ns         = "jsooexp_obj_dup",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_side_effect",
    ns         = "jsooexp_side_effect",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_sourcemap",
    ns         = "jsooexp_sourcemap",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_static_eval",
    ns         = "jsooexp_static_eval",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_sys_command",
    ns         = "jsooexp_sys_command",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_sys_fs",
    ns         = "jsooexp_sys_fs",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_tailcall",
    ns         = "jsooexp_tailcall",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_target_env",
    ns         = "jsooexp_target_env",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_unix_fs",
    ns         = "jsooexp_unix_fs",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

#################
ocaml_ns_archive(  ##
    name       = "jsooexp_variable_declaration_output",
    ns         = "jsooexp_variable_declaration_output",
    manifest = [
        ":Array_access",
        ":Build_path_prefix_map",
        ":Call_gen",
        ":Cond",
        ":Eliminate_exception_handler",
        ":Empty_cma",
        ":End_to_end",
        ":Error",
        ":Exceptions",
        ":Exports",
        ":Getenv",
        ":Gh1007",
        ":Gh1051",
        ":Gl507",
        ":Inlining",
        ":Js_parser_printer",
        ":Lazy",
        ":Macro",
        ":Match_with_exn",
        ":Mutable_closure",
        ":Obj",
        ":Obj_dup",
        ":Side_effect",
        ":Sourcemap",
        ":Static_eval",
        ":Sys_command",
        ":Sys_fs",
        ":Tailcall",
        ":Target_env",
        ":Unix_fs",
        ":Variable_declaration_output"
    ],
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Array_access",
    struct        = "array_access.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Build_path_prefix_map",
    struct        = "build_path_prefix_map.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Call_gen",
    struct        = "call_gen.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Cond",
    struct        = "cond.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Eliminate_exception_handler",
    struct        = "eliminate_exception_handler.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Empty_cma",
    struct        = "empty_cma.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "End_to_end",
    struct        = "end_to_end.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Error",
    struct        = "error.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Exceptions",
    struct        = "exceptions.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Exports",
    struct        = "exports.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Getenv",
    struct        = "getenv.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Gh1007",
    struct        = "gh1007.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Gh1051",
    struct        = "gh1051.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Gl507",
    struct        = "gl507.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Inlining",
    struct        = "inlining.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Js_parser_printer",
    struct        = "js_parser_printer.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Lazy",
    struct        = "lazy.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Macro",
    struct        = "macro.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Match_with_exn",
    struct        = "match_with_exn.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Mutable_closure",
    struct        = "mutable_closure.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Obj",
    struct        = "obj.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Obj_dup",
    struct        = "obj_dup.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Side_effect",
    struct        = "side_effect.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Sourcemap",
    struct        = "sourcemap.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Static_eval",
    struct        = "static_eval.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Sys_command",
    struct        = "sys_command.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Sys_fs",
    struct        = "sys_fs.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Tailcall",
    struct        = "tailcall.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Target_env",
    struct        = "target_env.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Unix_fs",
    struct        = "unix_fs.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)

ocaml_module(
    name          = "Variable_declaration_output",
    struct        = "variable_declaration_output.ml",
    opts          = OPTS_1,
    deps          = DEPS_1,
    ppx           = ":ppx_1.exe", #X1
    ppx_args      = ["-inline-test-lib", "JSOOEXP_ARRAY_ACCESS", ],
)


###############
ppx_executable(
    name    = "ppx_1.exe",
    main    = ":Ppx_driver",
    deps = [
        "@opam_ppx_expect//lib/ppx_expect"
    ],
    ## @opam_ppx_inline_test//lib/ppx_inline_test
)

#############
ppx_module(
    name       = "Ppx_driver",
    struct     = ":ppx_driver.ml",
    visibility = ["//visibility:public"],
    deps       = ["@opam_ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "__ppx_driver__",
    outs = ["ppx_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ])
)

############################# Rules ##################################

########
genrule(
    outs  = [
        "dune.inc.gen"
    ],
    name  = "__dune.inc.gen__",
    srcs  = [
        "//compiler/tests-compiler:glob_STAR.ml"
    ],
    cmd   = " ".join([
        "cp $(locations //compiler/tests-compiler:glob_STAR.ml) . ;",
        "$(execpath //compiler/tests-compiler/gen-rules:gen.exe)",

        "> $@"
    ]),
    exec_tools = [
        "//compiler/tests-compiler/gen-rules:gen.exe"
    ]
)

##########
diff_test(
    name  = "dune.inc.gen.diff_test",
    file1  = ":dune.inc.gen",
    file2  = ":dune.inc"
)

##########
filegroup(
    name = "glob_STAR.ml",
    srcs = glob(["*.ml"]),
    visibility = ["//visibility:public"]
)

