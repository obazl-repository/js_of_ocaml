package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ns_library",
     "ocaml_exec_module",
     "ocaml_module",
)

load("@rules_jsoo//build:rules.bzl", "jsoo_binary", "jsoo_library")

load("@aspect_rules_js//js:defs.bzl",
     "js_binary", "js_run_binary", "js_library", "js_test")

##############################
####  Executable Targets  ####
#############
js_binary(
    name        = "test_string.bc.js",
    entry_point = ":test_string.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "test_string.exe.jsoo",
    main   = ":test_string.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "test_string.exe",
    main     = ":Test_string",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Test_string",
    struct        = "test_string.ml",
)

#############
js_binary(
    name        = "binary.bc.js",
    entry_point = ":binary.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "binary.exe.jsoo",
    main   = ":binary.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "binary.exe",
    main     = ":Binary",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Binary",
    struct        = "binary.ml",
)

######################## Modules & Signatures ########################
##############
js_run_binary(
    name  = "__test_string.referencejs__",
    tool  = ":test_string.bc.js",
    stdout  = "test_string.referencejs"
)

##########
diff_test(
    name  = "test_string.reference.diff_test",
    file1  = ":test_string.reference",
    file2  = ":test_string.referencejs"
)

##############
js_run_binary(
    name  = "__tools__",
    tool  = ":binary.bc.js",
    stdout  = "tools.stdout"
)

