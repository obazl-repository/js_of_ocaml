package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ns_library",
     "ocaml_exec_module",
     "ocaml_module",
)

load("@rules_jsoo//build:rules.bzl", "jsoo_binary", "jsoo_library")

load("@aspect_rules_js//js:defs.bzl",
     "js_binary", "js_run_binary", "js_library", "js_test")

##############################
####  Executable Targets  ####
#############
js_binary(
    name        = "test_bytes.bc.js",
    entry_point = ":test_bytes.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "test_bytes.exe.jsoo",
    main   = ":test_bytes.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "test_bytes.exe",
    main     = ":Test_bytes",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Test_bytes",
    struct        = "test_bytes.ml",
    deps          =  [
        ":Testing"
    ],
)

#############
js_binary(
    name        = "binary.bc.js",
    entry_point = ":binary.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "binary.exe.jsoo",
    main   = ":binary.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "binary.exe",
    main     = ":Binary",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Binary",
    struct        = "binary.ml",
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Testing",
    struct        = "testing.ml",
)

##############
js_run_binary(
    name  = "__test_bytes.referencejs__",
    tool  = ":test_bytes.bc.js",
    stdout  = "test_bytes.referencejs"
)

##########
diff_test(
    name  = "test_bytes.reference.diff_test",
    file1  = ":test_bytes.reference",
    file2  = ":test_bytes.referencejs"
)

##############
js_run_binary(
    name  = "__binary.referencejs__",
    tool  = ":binary.bc.js",
    stdout  = "binary.referencejs"
)

