package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ns_library",
     "ocaml_exec_module",
     "ocaml_module",
)

load("@rules_jsoo//build:rules.bzl", "jsoo_binary", "jsoo_library")

load("@aspect_rules_js//js:defs.bzl",
     "js_binary", "js_run_binary", "js_library", "js_test")

OPTS_1 = [
        "-no-strict-formats"
]

##############################
####  Executable Targets  ####
#############
js_binary(
    name        = "pr6824.bc.js",
    entry_point = ":pr6824.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "pr6824.exe.jsoo",
    main   = ":pr6824.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "pr6824.exe",
    main     = ":Pr6824",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Pr6824",
    struct        = "pr6824.ml",
    opts          = OPTS_1,
    deps          =  [
        ":Testing"
    ],
)

#############
js_binary(
    name        = "print_if_newline.bc.js",
    entry_point = ":print_if_newline.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "print_if_newline.exe.jsoo",
    main   = ":print_if_newline.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "print_if_newline.exe",
    main     = ":Print_if_newline",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Print_if_newline",
    struct        = "print_if_newline.ml",
    opts          = OPTS_1,
)

#############
js_binary(
    name        = "pp_print_custom_break.bc.js",
    entry_point = ":pp_print_custom_break.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "pp_print_custom_break.exe.jsoo",
    main   = ":pp_print_custom_break.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "pp_print_custom_break.exe",
    main     = ":Pp_print_custom_break",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Pp_print_custom_break",
    struct        = "pp_print_custom_break.ml",
    opts          = OPTS_1,
)

#############
js_binary(
    name        = "print_seq.bc.js",
    entry_point = ":print_seq.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "print_seq.exe.jsoo",
    main   = ":print_seq.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "print_seq.exe",
    main     = ":Print_seq",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Print_seq",
    struct        = "print_seq.ml",
    opts          = OPTS_1,
    deps          =  [
        ":Testing"
    ],
)

#############
js_binary(
    name        = "tformat.bc.js",
    entry_point = ":tformat.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "tformat.exe.jsoo",
    main   = ":tformat.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "tformat.exe",
    main     = ":Tformat",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Tformat",
    struct        = "tformat.ml",
    opts          = OPTS_1,
    deps          =  [
        ":Testing"
    ],
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Testing",
    struct        = "testing.ml",
    opts          = OPTS_1,
)

##############
js_run_binary(
    name  = "__pr6824.referencejs__",
    tool  = ":pr6824.bc.js",
    stdout  = "pr6824.referencejs"
)

##########
diff_test(
    name  = "pr6824.reference.diff_test",
    file1  = ":pr6824.reference",
    file2  = ":pr6824.referencejs"
)

##############
js_run_binary(
    name  = "__print_if_newline.referencejs__",
    tool  = ":print_if_newline.bc.js",
    stdout  = "print_if_newline.referencejs"
)

##########
diff_test(
    name  = "print_if_newline.reference.diff_test",
    file1  = ":print_if_newline.reference",
    file2  = ":print_if_newline.referencejs"
)

##############
js_run_binary(
    name  = "__pp_print_custom_break.referencejs__",
    tool  = ":pp_print_custom_break.bc.js",
    stdout  = "pp_print_custom_break.referencejs"
)

##########
diff_test(
    name  = "pp_print_custom_break.reference.diff_test",
    file1  = ":pp_print_custom_break.reference",
    file2  = ":pp_print_custom_break.referencejs"
)

##############
js_run_binary(
    name  = "__print_seq.referencejs__",
    tool  = ":print_seq.bc.js",
    stdout  = "print_seq.referencejs"
)

##########
diff_test(
    name  = "print_seq.reference.diff_test",
    file1  = ":print_seq.reference",
    file2  = ":print_seq.referencejs"
)

##############
js_run_binary(
    name  = "__tformat.referencejs__",
    tool  = ":tformat.bc.js",
    stdout  = "tformat.referencejs"
)

##########
diff_test(
    name  = "tformat.reference.diff_test",
    file1  = ":tformat.reference",
    file2  = ":tformat.referencejs"
)

