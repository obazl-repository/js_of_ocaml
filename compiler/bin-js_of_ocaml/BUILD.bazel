package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_ns_library",
     "ocaml_module",
)

DEPS_1 = [
    "//compiler/lib-cmdline:jsoo_cmdline",
    "//compiler/lib:js_of_ocaml_compiler",
    "@cmdliner//lib/cmdliner",
    "@ocaml//compiler-libs/common",
    "//compiler/lib-runtime-files:js_of_ocaml_compiler_runtime_files"
]

OPTS_1 = [
        "-safe-string"
]

##############################
####  Executable Targets  ####
ocaml_binary(
    name     = "js_of_ocaml.exe",
    main     = ":Js_of_ocaml",
    visibility = ["//visibility:public"],
)

ocaml_ns_library(
    name = "Js_of_ocaml_execlib",
    manifest = [
        ":Build_fs",
        ":Build_runtime",
        ":Check_runtime",
        ":Cmd_arg",
        ":Compile",
        ":Findlib_support",
        ":Info",
        ":Link",
        ":Print_runtime"
    ],
    visibility = ["//visibility:private"],
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Build_fs",
    struct        = "build_fs.ml",
    sig           = "build_fs.mli",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Info"
    ],
)

ocaml_module(
    name          = "Build_runtime",
    struct        = "build_runtime.ml",
    sig           = "build_runtime.mli",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Cmd_arg",
        ":Compile",
        ":Info"
    ],
)

ocaml_module(
    name          = "Cmd_arg",
    struct        = "cmd_arg.ml",
    sig           = "cmd_arg.mli",
    opts          = OPTS_1,
    deps          = DEPS_1,
)

ocaml_module(
    name          = "Compile",
    struct        = "compile.ml",
    sig           = "compile.mli",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Info",
        ":Cmd_arg"
    ],
)

ocaml_module(
    name          = "Info",
    struct        = "info.ml",
    sig           = "info.mli",
    opts          = OPTS_1,
    deps          = DEPS_1,
)

ocaml_module(
    name          = "Js_of_ocaml",
    struct        = "js_of_ocaml.ml",
    sig           = "js_of_ocaml.mli",
    opts          = ["-open", "Js_of_ocaml_execlib"] + OPTS_1,
    deps          = [":Js_of_ocaml_execlib"],
)

ocaml_module(
    name          = "Link",
    struct        = "link.ml",
    sig           = "link.mli",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Info"
    ],
)

ocaml_module(
    name          = "Print_runtime",
    struct        = "print_runtime.ml",
    sig           = "print_runtime.mli",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Info"
    ],
)

ocaml_module(
    name          = "Check_runtime",
    struct        = "check_runtime.ml",
    opts          = OPTS_1,
    deps          = DEPS_1 + [
        ":Info"
    ],
)

ocaml_module(
    name          = "Findlib_support",
    struct        = select({
        "//bzl/import:js_of_ocaml-compiler.findlib-support?": "findlib_support.empty.ml",
        "//conditions:default": "findlib_support.empty.ml"
    }),
    opts          = OPTS_1,
    deps          = DEPS_1 +  select({
        "//bzl/import:js_of_ocaml-compiler.findlib-support?": ["//compiler/lib-findlib-support:jsoo_findlib_support"],
        "//conditions:default": []
    }),  ## 
)

########################
####  Rule Targets  ####

################  rule  ################
genrule(
    outs  = [
        "js_of_ocaml.1"
    ],
    name  = "__js_of_ocaml.1__",
    cmd   = " ".join([
        "$(execpath //compiler/bin-js_of_ocaml:js_of_ocaml.exe)",
        "--help=groff",
        "> $@"
    ]),
    exec_tools = [
        "//compiler/bin-js_of_ocaml:js_of_ocaml.exe"
    ]
)
################  rule  ################
genrule(
    outs  = [
        "js_of_ocaml-link.1"
    ],
    name  = "__js_of_ocaml-link.1__",
    cmd   = " ".join([
        "$(execpath //compiler/bin-js_of_ocaml:js_of_ocaml.exe)",
        "link",
        "--help=groff",
        "> $@"
    ]),
    exec_tools = [
        "//compiler/bin-js_of_ocaml:js_of_ocaml.exe"
    ]
)
################  rule  ################
genrule(
    outs  = [
        "js_of_ocaml-build-fs.1"
    ],
    name  = "__js_of_ocaml-build-fs.1__",
    cmd   = " ".join([
        "$(execpath //compiler/bin-js_of_ocaml:js_of_ocaml.exe)",
        "build-fs",
        "--help=groff",
        "> $@"
    ]),
    exec_tools = [
        "//compiler/bin-js_of_ocaml:js_of_ocaml.exe"
    ]
)
################  rule  ################
genrule(
    outs  = [
        "js_of_ocaml-build-runtime.1"
    ],
    name  = "__js_of_ocaml-build-runtime.1__",
    cmd   = " ".join([
        "$(execpath //compiler/bin-js_of_ocaml:js_of_ocaml.exe)",
        "build-runtime",
        "--help=groff",
        "> $@"
    ]),
    exec_tools = [
        "//compiler/bin-js_of_ocaml:js_of_ocaml.exe"
    ]
)
################  rule  ################
genrule(
    outs  = [
        "runtime.js"
    ],
    name  = "__runtime.js__",
    cmd   = " ".join([
        "$(execpath //compiler/bin-js_of_ocaml:js_of_ocaml.exe)",
        "print-standard-runtime",
        "> $@"
    ]),
    exec_tools = [
        "//compiler/bin-js_of_ocaml:js_of_ocaml.exe"
    ]
)

