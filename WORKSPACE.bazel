workspace(name = "js_of_ocaml_dev")

# load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
# load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# local_repository(name = "js_of_ocaml-ppx", path = "ppx/ppx_js")

load("//:WORKSPACE.bzl", "fetch_repos")
fetch_repos()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

load("@rules_ocaml//:WORKSPACE.bzl", "fetch_repos")
# fetch_repos()

load("@opam//:WORKSPACE.bzl", "opam_fetch_repos")
opam_fetch_repos()

load("@libs7//:WORKSPACE.bzl", libs7_fetch_repos = "cc_fetch_repos")
libs7_fetch_repos()

load("@mibl//:WORKSPACE.bzl", mibl_fetch_repos = "cc_fetch_repos")
mibl_fetch_repos()

# local_repository(
#     name = "rules_jsoo",
#     path = "/Users/gar/obazl/rules_jsoo"
# )

load("@rules_jsoo//:WORKSPACE.bzl", jsoo_fetch_repos = "fetch_repos")
jsoo_fetch_repos()

################ rules_js etc. ################
load("@aspect_rules_js//js:repositories.bzl", "rules_js_dependencies")
rules_js_dependencies()

load("@rules_nodejs//nodejs:repositories.bzl",
     "DEFAULT_NODE_VERSION",
     "nodejs_register_toolchains")

nodejs_register_toolchains(
    name = "nodejs",
    node_version = DEFAULT_NODE_VERSION,
)

# load("@aspect_rules_js//npm:npm_import.bzl", "npm_translate_lock")
# npm_translate_lock(
#     name = "npm",
#     bins = {
#         # derived from "bin" attribute in node_modules/typescript/package.json
#         "typescript": {
#             "tsc": "./bin/tsc",
#             "tsserver": "./bin/tsserver",
#         },
#     },
#     pnpm_lock = "//:pnpm-lock.yaml",
#     verify_node_modules_ignored = "//:.bazelignore",
# )
# load("@npm//:repositories.bzl", "npm_repositories")
# npm_repositories()

## end of jsoo deps

################################################################
## independent of loads above but dependent on
## @obazl//shared:refresh or @obazl//local:refresh:
load("//:COSWITCH.bzl", register_coswitch = "register")
register_coswitch()

load("@coswitch//:BOOTSTRAP.bzl", "bootstrap")
bootstrap()
################

register_toolchains("//bzl/toolchain:local")

## external project:
# register_toolchains("@js_of_ocaml//bzl/toolchain:local")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "aspect_rules_swc",
    sha256 = "313307136cb6369f3c9d2992209c1e354b3e2c9989877ee67c688917320fba1f",
    strip_prefix = "rules_swc-0.17.1",
    url = "https://github.com/aspect-build/rules_swc/archive/refs/tags/v0.17.1.tar.gz",
)

###################
# rules_swc setup #
###################

# Fetches the rules_swc dependencies.
# If you want to have a different version of some dependency,
# you should fetch it *before* calling this.
# Alternatively, you can skip calling this function, so long as you've
# already fetched all the dependencies.
load("@aspect_rules_swc//swc:dependencies.bzl", "rules_swc_dependencies")

rules_swc_dependencies()

# Fetches a pre-built Rust-node binding from
# https://github.com/swc-project/swc/releases.
# If you'd rather compile it from source, you can use rules_rust, fetch the project,
# then register the toolchain yourself. (Note, this is not yet documented)
load("@aspect_rules_swc//swc:repositories.bzl", "LATEST_VERSION", "swc_register_toolchains")

swc_register_toolchains(
    name = "swc",
    swc_version = LATEST_VERSION,
)

# Fetches a NodeJS interpreter, needed to run the swc CLI.
# You can skip this if you already register a nodejs toolchain.
# load("@rules_nodejs//nodejs:repositories.bzl", "DEFAULT_NODE_VERSION", "nodejs_register_toolchains")

# nodejs_register_toolchains(
#     name = "nodejs",
#     node_version = DEFAULT_NODE_VERSION,
# )

################################################################
# load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "io_bazel_rules_closure",
    sha256 = "9498e57368efb82b985db1ed426a767cbf1ba0398fd7aed632fc3908654e1b1e",
    strip_prefix = "rules_closure-0.12.0",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_closure/archive/0.12.0.tar.gz",
        "https://github.com/bazelbuild/rules_closure/archive/0.12.0.tar.gz",
    ],
)

load("@io_bazel_rules_closure//closure:repositories.bzl", "rules_closure_dependencies", "rules_closure_toolchains")
rules_closure_dependencies()
rules_closure_toolchains()
